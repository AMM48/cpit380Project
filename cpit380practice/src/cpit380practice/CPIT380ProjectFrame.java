/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cpit380practice;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.*;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.Size;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author 00059414
 */
public class CPIT380ProjectFrame extends javax.swing.JFrame {

    Picture inputImage = null;
    Picture resetImage = null;
    ImageIcon icon = null;
    String fileName = null;
    Graphics g = null;

    /**
     * Creates new form CPIT380ProjectFrame
     */
    public CPIT380ProjectFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1_Pictures = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel1_HoldingImages = new javax.swing.JPanel();
        jLabel1_ImageDisplay = new javax.swing.JLabel();
        jPanel2_HoldingButtons = new javax.swing.JPanel();
        jButton1_RotateLeft = new javax.swing.JButton();
        jButton1_Browse = new javax.swing.JButton();
        rotateRight = new javax.swing.JButton();
        jButton1_Reset = new javax.swing.JButton();
        jSlider1 = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jSlider2 = new javax.swing.JSlider();
        jLabel2 = new javax.swing.JLabel();
        jSlider3 = new javax.swing.JSlider();
        jLabel3 = new javax.swing.JLabel();
        jButton1_Histogram1 = new javax.swing.JButton();
        jButton1_Histogram2 = new javax.swing.JButton();
        jButton1_Histogram3 = new javax.swing.JButton();
        jButton1_Histogram4 = new javax.swing.JButton();
        jButton1_Histogram6 = new javax.swing.JButton();
        jButton1_Histogram8 = new javax.swing.JButton();
        jButton1_Histogram7 = new javax.swing.JButton();
        jButton1_Histogram9 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton34 = new javax.swing.JButton();
        jButton35 = new javax.swing.JButton();
        jButton36 = new javax.swing.JButton();
        jButton37 = new javax.swing.JButton();
        jButton38 = new javax.swing.JButton();
        jSlider5 = new javax.swing.JSlider();
        jLabel4 = new javax.swing.JLabel();
        jSlider6 = new javax.swing.JSlider();
        jLabel5 = new javax.swing.JLabel();
        jButton39 = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jButton14 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jSlider4 = new javax.swing.JSlider();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jButton26 = new javax.swing.JButton();
        jButton27 = new javax.swing.JButton();
        jButton28 = new javax.swing.JButton();
        jButton29 = new javax.swing.JButton();
        jButton30 = new javax.swing.JButton();
        jButton31 = new javax.swing.JButton();
        jButton32 = new javax.swing.JButton();
        jButton33 = new javax.swing.JButton();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jButton18 = new javax.swing.JButton();
        jButton19 = new javax.swing.JButton();
        jButton20 = new javax.swing.JButton();
        jButton21 = new javax.swing.JButton();
        jButton22 = new javax.swing.JButton();
        jButton23 = new javax.swing.JButton();
        jButton24 = new javax.swing.JButton();
        jButton25 = new javax.swing.JButton();
        jTabbedPane3 = new javax.swing.JTabbedPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CPIT380Project");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jTabbedPane1_Pictures.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setPreferredSize(new java.awt.Dimension(388, 355));

        jPanel1_HoldingImages.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1_ImageDisplay.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout jPanel1_HoldingImagesLayout = new javax.swing.GroupLayout(jPanel1_HoldingImages);
        jPanel1_HoldingImages.setLayout(jPanel1_HoldingImagesLayout);
        jPanel1_HoldingImagesLayout.setHorizontalGroup(
            jPanel1_HoldingImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1_HoldingImagesLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1_ImageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 669, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(280, 280, 280))
        );
        jPanel1_HoldingImagesLayout.setVerticalGroup(
            jPanel1_HoldingImagesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1_HoldingImagesLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel1_ImageDisplay, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(413, Short.MAX_VALUE))
        );

        jPanel2_HoldingButtons.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jButton1_RotateLeft.setText("Rotate Left");
        jButton1_RotateLeft.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_RotateLeftActionPerformed(evt);
            }
        });

        jButton1_Browse.setText("Browse");
        jButton1_Browse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_BrowseActionPerformed(evt);
            }
        });

        rotateRight.setText("Rotate Right");
        rotateRight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotateRightActionPerformed(evt);
            }
        });

        jButton1_Reset.setText("Reset");
        jButton1_Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_ResetActionPerformed(evt);
            }
        });

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });

        jLabel1.setText("Red");

        jSlider2.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider2StateChanged(evt);
            }
        });

        jLabel2.setText("Green");

        jSlider3.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider3StateChanged(evt);
            }
        });

        jLabel3.setText("Blue");

        jButton1_Histogram1.setText("Grayscale");
        jButton1_Histogram1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grayScale(evt);
            }
        });

        jButton1_Histogram2.setText("RGB to HSV");
        jButton1_Histogram2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rgbToHsv(evt);
            }
        });

        jButton1_Histogram3.setText("180 Rotation");
        jButton1_Histogram3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rotation180(evt);
            }
        });

        jButton1_Histogram4.setText("Gray To Binary");
        jButton1_Histogram4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrayToBinary(evt);
            }
        });

        jButton1_Histogram6.setText("Collage");
        jButton1_Histogram6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1_Histogram6ActionPerformed(evt);
            }
        });

        jButton1_Histogram8.setText("ComputeHisto");
        jButton1_Histogram8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComputeHistogram(evt);
            }
        });

        jButton1_Histogram7.setText("Box Filter");
        jButton1_Histogram7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BoxFilter(evt);
            }
        });

        jButton1_Histogram9.setText("Crop");
        jButton1_Histogram9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CropHandler(evt);
            }
        });

        jButton1.setText("Min Filter");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MinFIlter(evt);
            }
        });

        jButton2.setText("Gaussian FIlter");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GaussianFilter(evt);
            }
        });

        jButton3.setText("Max Filter");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3MaxFilter(evt);
            }
        });

        jButton4.setText("Laplacian Filter");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LaplacianFilter(evt);
            }
        });

        jButton5.setText("Weighted Median Filter");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WeightedMedianFilter(evt);
            }
        });

        jButton6.setText("Median Filter");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MedianFilter(evt);
            }
        });

        jButton7.setText("Compute Contrast");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                computeContrast(evt);
            }
        });

        jButton8.setText("Red Eye");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redEye(evt);
            }
        });

        jButton9.setText("Edge Detection");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetection(evt);
            }
        });

        jButton10.setText("Edge Detection Lap");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetectionLaplacian(evt);
            }
        });

        jButton11.setText("Edge Detection TB");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetectionTB(evt);
            }
        });

        jButton12.setText("Edge Detection LR");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetectionLR(evt);
            }
        });

        jButton34.setText("Blend");
        jButton34.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                blendImages(evt);
            }
        });

        jButton35.setText("Vertical Reflection");
        jButton35.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verticalReflection(evt);
            }
        });

        jButton36.setText("Horizontal Reflection");
        jButton36.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                horizontalReflection(evt);
            }
        });

        jButton37.setText("D1 Reflection");
        jButton37.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectionD1(evt);
            }
        });

        jButton38.setText("D2 Reflection");
        jButton38.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reflectionD2(evt);
            }
        });

        jSlider5.setMajorTickSpacing(2);
        jSlider5.setMaximum(6);
        jSlider5.setValue(0);
        jSlider5.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider5StateChanged(evt);
            }
        });

        jLabel4.setText("Down");

        jSlider6.setMajorTickSpacing(2);
        jSlider6.setMaximum(6);
        jSlider6.setValue(0);
        jSlider6.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider6StateChanged(evt);
            }
        });

        jLabel5.setText("Up");

        jButton39.setText("Background Subtraction");
        jButton39.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSubPic(evt);
            }
        });

        javax.swing.GroupLayout jPanel2_HoldingButtonsLayout = new javax.swing.GroupLayout(jPanel2_HoldingButtons);
        jPanel2_HoldingButtons.setLayout(jPanel2_HoldingButtonsLayout);
        jPanel2_HoldingButtonsLayout.setHorizontalGroup(
            jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jButton1_Browse)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jButton1_Reset)
                        .addGap(123, 123, 123))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
            .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addComponent(jButton6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton5))
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jButton1_RotateLeft, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jButton1_Histogram2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addComponent(jButton1_Histogram6, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton1_Histogram7, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jButton34))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(rotateRight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1_Histogram1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1_Histogram3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1_Histogram4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jButton1_Histogram8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton3)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton2)
                                .addComponent(jButton4)))
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton7)
                                .addComponent(jButton9)
                                .addComponent(jButton11))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton10)
                                .addComponent(jButton8)
                                .addComponent(jButton35)))
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton12)
                                .addComponent(jButton37))
                            .addGap(18, 18, 18)
                            .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton38)
                                .addComponent(jButton36)))
                        .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                            .addComponent(jButton1_Histogram9, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton39)))
                    .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSlider6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(53, 53, 53)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2_HoldingButtonsLayout.setVerticalGroup(
            jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1_Browse)
                .addGap(22, 22, 22)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jSlider1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSlider2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(35, 35, 35)
                .addComponent(jButton1_Reset)
                .addGap(18, 18, 18)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1_RotateLeft)
                    .addComponent(rotateRight))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1_Histogram1)
                    .addComponent(jButton34))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1_Histogram2)
                    .addComponent(jButton1_Histogram3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jButton1_Histogram4)
                        .addGap(34, 34, 34)
                        .addComponent(jButton1_Histogram8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton1)))
                    .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jButton1_Histogram6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1_Histogram9)
                            .addComponent(jButton39))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1_Histogram7)
                        .addGap(40, 40, 40)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton6)
                    .addComponent(jButton5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2_HoldingButtonsLayout.createSequentialGroup()
                        .addComponent(jButton9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton11)
                            .addComponent(jButton35))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton12)
                            .addComponent(jButton36)))
                    .addComponent(jButton10))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton37)
                    .addComponent(jButton38))
                .addGap(18, 18, 18)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(jSlider5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2_HoldingButtonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSlider6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel2_HoldingButtons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1_HoldingImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1_HoldingImages, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jPanel2_HoldingButtons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane1_Pictures.addTab("Pictures", jPanel1);

        jButton14.setText("Browse");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browse(evt);
            }
        });

        jButton13.setText("Reset");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResetSound(evt);
            }
        });

        jButton15.setText("Play Sound");
        jButton15.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playSound(evt);
            }
        });

        jSlider4.setMajorTickSpacing(10);
        jSlider4.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider4StateChanged(evt);
            }
        });

        jButton16.setText("Splice");
        jButton16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                splice(evt);
            }
        });

        jButton17.setText("Reverse");
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reverseSound(evt);
            }
        });

        jButton26.setText("Clip");
        jButton26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClippingHandler(evt);
            }
        });

        jButton27.setText("Blend");
        jButton27.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlendingSound(evt);
            }
        });

        jButton28.setText("Simple Average");
        jButton28.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                simpleAverageFilter(evt);
            }
        });

        jButton29.setText("Spread n Squeeze");
        jButton29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SpreadNSqueeze(evt);
            }
        });

        jButton30.setText("Weighted Average");
        jButton30.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                weightedAverageSound(evt);
            }
        });

        jButton31.setText("Min Filter");
        jButton31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minFilterSound(evt);
            }
        });

        jButton32.setText("Max Filter");
        jButton32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maxFilterSound(evt);
            }
        });

        jButton33.setText("Median");
        jButton33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                medianFilterSound(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton14)
                        .addGap(33, 33, 33)
                        .addComponent(jButton13))
                    .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(59, 59, 59)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton16)
                    .addComponent(jButton17))
                .addGap(42, 42, 42)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton26)
                    .addComponent(jButton27))
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton29, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(36, 36, 36)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton33))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jButton31)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton32)))
                .addContainerGap(462, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton14)
                    .addComponent(jButton13)
                    .addComponent(jButton16)
                    .addComponent(jButton26)
                    .addComponent(jButton28)
                    .addComponent(jButton30)
                    .addComponent(jButton33))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton15)
                    .addComponent(jButton17)
                    .addComponent(jButton27)
                    .addComponent(jButton29)
                    .addComponent(jButton31)
                    .addComponent(jButton32))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSlider4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(760, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("tab1", jPanel2);

        jTabbedPane1_Pictures.addTab("Sounds", jTabbedPane1);

        jButton18.setText("Rectangle Movie Right to Left");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jButton19.setText(" Trajectory of Motion");
        jButton19.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trajectoryOfMotion(evt);
            }
        });

        jButton20.setText("Bouncing Ball");
        jButton20.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bouncingBall(evt);
            }
        });

        jButton21.setText("Ticker Tape");
        jButton21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tickerTape(evt);
            }
        });

        jButton22.setText("Cropping");
        jButton22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                croppingHandler(evt);
            }
        });

        jButton23.setText("Sunset");
        jButton23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sunsetHandler(evt);
            }
        });

        jButton24.setText("Background Subtraction");
        jButton24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backgroundSubtraction(evt);
            }
        });

        jButton25.setText("Edge Detection");
        jButton25.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                edgeDetectionMovie(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(56, 56, 56)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton25)
                    .addComponent(jButton24)
                    .addComponent(jButton23)
                    .addComponent(jButton22)
                    .addComponent(jButton21)
                    .addComponent(jButton20)
                    .addComponent(jButton19)
                    .addComponent(jButton18))
                .addContainerGap(1078, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jButton18)
                .addGap(18, 18, 18)
                .addComponent(jButton19)
                .addGap(18, 18, 18)
                .addComponent(jButton20)
                .addGap(18, 18, 18)
                .addComponent(jButton21)
                .addGap(18, 18, 18)
                .addComponent(jButton22)
                .addGap(18, 18, 18)
                .addComponent(jButton23)
                .addGap(18, 18, 18)
                .addComponent(jButton24)
                .addGap(18, 18, 18)
                .addComponent(jButton25)
                .addContainerGap(536, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("tab1", jPanel3);

        jTabbedPane1_Pictures.addTab("Movies", jTabbedPane2);
        jTabbedPane1_Pictures.addTab("Text", jTabbedPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1_Pictures)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1_Pictures))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    Picture pic;
    Sound currentSound;
    String filePath;
    int numOfClicks = 0;
    int x1 = 0;
    int y1 = 0;
    int x2;
    int y2;

    private void browse(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browse
        try {
            filePath = FileChooser.pickAFile();
            currentSound = new Sound(filePath);
            changeContentStatus(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Some error happend:" + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_browse

    private void ResetSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResetSound
        currentSound = new Sound(filePath);
        changeContentStatus(true);
        jSlider4.setValue(50);
    }//GEN-LAST:event_ResetSound

    private void playSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playSound
        currentSound.play();
    }//GEN-LAST:event_playSound

    private void jSlider4StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider4StateChanged
        Sound target = new Sound(currentSound);
        int x = jSlider4.getValue();
        SoundSample[] sampleArray = currentSound.getSamples();
        SoundSample[] targetArray = target.getSamples();
        int value = 0;
        int p = 0;
        // loop through all the samples in the array
        for (int i = 0; i < sampleArray.length; i++) {
            if (x == 50) {
                break;
            } else if (x > 50) {
                value = sampleArray[i].getValue();
                p = (x - 50) * 2 * value / 100;
                targetArray[i].setValue(value + p);
            } else {
                value = sampleArray[i].getValue();
                p = (50 - x) * 2 * value / 100;
                targetArray[i].setValue(value - p);
            }

        }
        target.play();
    }//GEN-LAST:event_jSlider4StateChanged

    private void splice(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_splice
        currentSound = currentSound.generalizedSplice(1);
        while (true) {
            int reply = JOptionPane.showConfirmDialog(null, "Do you want to splice another sound ?", "Splice?", JOptionPane.YES_NO_OPTION);
            if (reply == JOptionPane.YES_OPTION) {
                currentSound = currentSound.generalizedSplice(1);
            } else {
                currentSound.play();
                break;
            }
        }
    }//GEN-LAST:event_splice

    private void reverseSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reverseSound
        currentSound.reverse();
//        SoundSample[] sound = currentSound.getSamples();
//        int index = 0;
//
//        for (int i = currentSound.getLength() - 1; i >= 0; i--) {
//
//            SoundSample temp = sound[i];
//            sound[index] = temp;
//
//            currentSound.setSampleValueAt(index, currentSound.getSampleValueAt(i));
//            index++;
//        }

        currentSound.play();
    }//GEN-LAST:event_reverseSound

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed
        int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));

        int FPS = 30;
        Picture p;
        Graphics g;

        FrameSequencer frameSequencer = new FrameSequencer("Movie");

        //for each 1 SEC 30 FPS
        for (int i = 0; i < FPS * time; i++) {
            p = new Picture(640, 480);
            g = p.getGraphics();
            g.setColor(Color.CYAN);
            g.fillRect(Math.abs((i * 10) - 570), i * 8, 50, 50);

            frameSequencer.addFrame(p);
        }

        frameSequencer.play(FPS);
    }//GEN-LAST:event_jButton18ActionPerformed

    private void trajectoryOfMotion(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trajectoryOfMotion
        int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));
        int framesPerSec = 30;
        Picture p = null;
        Graphics g = null;
        FrameSequencer frameSequencer = new FrameSequencer("Movie");
        frameSequencer.setShown(true);
        // loop through the first second
        for (int i = 0; i < framesPerSec * time; i++) {
        // draw a filled rectangle;
        p = new Picture(1920, 1080);
        g = p.getGraphics();
        g.setColor(Color.CYAN);
        g.fillRect(i * 50, (int) (100 * Math.abs(Math.sin(i)) + 250), 50, 50);
        // add frame to sequencer
        frameSequencer.addFrame(p);
        }
        // play the movie
        frameSequencer.play(framesPerSec);
    }//GEN-LAST:event_trajectoryOfMotion

    private void bouncingBall(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bouncingBall
         try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));
            int framesPerSec = 30;
            Picture p = null;
            Graphics g = null;
            FrameSequencer frameSequencer = new FrameSequencer("Movie");

            frameSequencer.setShown(true);
            int distance = 150;
            int height = 480;
            int start = (height - 50) - distance;
            for (int i = 0; i < framesPerSec * time; i++) {
                p = new Picture(640, height);
                g = p.getGraphics();
                int y = (int) (Math.sin(30 + (i)) * distance) + start;
                if (y > (height - 50 - 10)) {
                    distance = distance / 2;
                    start = (height - 50) - distance;
                }
                y = (int) (Math.sin(30 + (i)) * distance) + start;
                g.setColor(Color.MAGENTA);
                g.fillOval(i * 20, y, 50, 50);
                // add frame to sequencer
                frameSequencer.addFrame(p);
            }
            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_bouncingBall

    private void tickerTape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tickerTape
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            String message = JOptionPane.showInputDialog("please enter your message");
            int framesPerSec = 60;
            Picture p = null;
            Graphics g = null;
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            boolean right = true;
            // loop for 2 seconds of animation
            for (int j = 0, k = 0; j < framesPerSec * time; j++) {
                // draw the string
                p = new Picture(500, 400);
                g = p.getGraphics();
                g.setColor(Color.BLACK);
                if (right) {
                    if (k * 10 > p.getWidth() - message.length() * 12) {
                        right = false;
                    }
                } else {
                    if (k < 1) {
                        right = true;
                    }
                }
                if (right) {
                    g.drawString(message, k++ * 10, 200);
                } else {
                    g.drawString(message, k-- * 10, 200);
                }
                // add frame to sequencer
                frameSequencer.addFrame(p);
            }

            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_tickerTape

    private void croppingHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_croppingHandler
         try {
            int duration = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));
            String fName = FileChooser.pickAFile();
            Picture pic = new Picture(fName);


            Picture target = null; 
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            int framesPerSec = 30;

            // loop creating the frames
            for (int i = 0; i < framesPerSec * duration; i++) {
                target = new Picture(640, 480);
                target.copy(pic, 250, 170, 390, 300, i * 10, i * 5);
                frameSequencer.addFrame(target);
            }

            // play the movie
            frameSequencer.play(framesPerSec);

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_croppingHandler

    private void sunsetHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sunsetHandler
        int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration in seconds"));
        String fName = FileChooser.pickAFile();
        Picture beachP = new Picture(fName);

        // declare other variables
        Picture target = null;
        FrameSequencer frameSequencer= new FrameSequencer("Movie");
        int framesPerSec = 30;

        frameSequencer.setShown(true);

        // loop creating the frames
        for (int i = 0; i < framesPerSec * time; i++) {
            beachP.makeSunset(100 - i * time);
            frameSequencer.addFrame(beachP);
        }

        // play the movie
        frameSequencer.play(framesPerSec);
    }//GEN-LAST:event_sunsetHandler

    private void backgroundSubtraction(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSubtraction
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            // load the pictures
            JFileChooser fc = new JFileChooser("C:\\Users\\abdul\\Desktop\\MM");
            fc.showOpenDialog(null);
            String foreground = fc.getSelectedFile().getAbsolutePath();
            Picture foregroundPic = null;

            fc.showOpenDialog(null);
            String oldBG = fc.getSelectedFile().getAbsolutePath();
            Picture oldBGPic = new Picture(oldBG);

            fc.showOpenDialog(null);
            String newBG = fc.getSelectedFile().getAbsolutePath();
            Picture newBGPic = new Picture(newBG);

            // declare other variables
            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            int framesPerSec = 30;
            frameSequencer.setShown(true);
            // loop creating the frames
            for (int i = 0; i < framesPerSec * time; i++) {
                foregroundPic = new Picture(foreground);
                foregroundPic.swapBackground(oldBGPic, newBGPic, i);
                frameSequencer.addFrame(foregroundPic);
            }

            // play the movie
            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_backgroundSubtraction

    private void edgeDetectionMovie(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetectionMovie
        try {
            int time = Integer.parseInt(JOptionPane.showInputDialog("please enter movie duration"));
            JFileChooser fc = new JFileChooser("C:\\Users\\abdul\\Desktop\\MM");
            fc.showOpenDialog(null);
            String fName = fc.getSelectedFile().getAbsolutePath();
            Picture pic = new Picture(fName);

            Picture copyPict = null;

            FrameSequencer frameSequencer = new FrameSequencer("Movie");
            int framesPerSec = 30;

            for (int i = 0; i < framesPerSec * time; i++) {
                copyPict = new Picture(pic);
                double topAverage = 0.0;
                double bottomAverage = 0.0;

                for (int x = 0; x < pic.getHeight() - 1; x++) {
                    for (int y = 0; y < copyPict.getWidth(); y++) {
                        Pixel topPixel = copyPict.getPixel(y, x);
                        Pixel bottomPixel = copyPict.getPixel(y, x + 1);

                        topAverage = (topPixel.getRed() + topPixel.getGreen() + topPixel.getBlue()) / 3.0;
                        bottomAverage = (bottomPixel.getRed() + bottomPixel.getGreen() + bottomPixel.getBlue()) / 3.0;

                        if (Math.abs(topAverage - bottomAverage) < (time * framesPerSec + 1) - i) {
                            topPixel.setColor(Color.WHITE);
                        } else {
                            topPixel.setColor(Color.BLACK);
                        }
                    }
                }

                frameSequencer.addFrame(copyPict);
            }

            frameSequencer.play(framesPerSec);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Time must be an integer", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_edgeDetectionMovie

    private void ClippingHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClippingHandler
        String first = JOptionPane.showInputDialog(null, "Enter the start Index: ");
        String last = JOptionPane.showInputDialog(null, "Enter the end Index: ");
        int firstIndx = Integer.parseInt(first);
        int lastIndx = Integer.parseInt(last);

        Sound s = currentSound.clip(firstIndx, lastIndx);
        s.play();
    }//GEN-LAST:event_ClippingHandler

    private void BlendingSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlendingSound
        String numberOfSound = JOptionPane.showInputDialog(null, "Please Enter the number of sounds : ");
        int num = Integer.parseInt(numberOfSound);

        if (num == 2) {

            String filePath1 = FileChooser.pickAFile();
            Sound sound1 = new Sound(filePath1);

            for (int i = 0; i < currentSound.getLength() - 1; i++) {

                currentSound.setSampleValueAt(i, currentSound.getSampleValueAt(i) + sound1.getSampleValueAt(i));

            }
        } else if (num == 3) {
            String filePath1 = FileChooser.pickAFile();
            Sound sound1 = new Sound(filePath1);
            String filePath2 = FileChooser.pickAFile();
            Sound sound2 = new Sound(filePath2);

            for (int i = 0; i < currentSound.getLength() - 1; i++) {

                currentSound.setSampleValueAt(i,
                        currentSound.getSampleValueAt(i) + sound1.getSampleValueAt(i) + sound2.getSampleValueAt(i));

            }
        }

        currentSound.play();
    }//GEN-LAST:event_BlendingSound

    private void simpleAverageFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_simpleAverageFilter
        // TODO add your handling code here:
        // take num
        String size = JOptionPane.showInputDialog(null, "Please Enter the size of window please: ");
        try {
            int Size = Integer.parseInt(size);
            currentSound.simpleAverage(Size);
            currentSound.play();
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_simpleAverageFilter

    private void SpreadNSqueeze(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SpreadNSqueeze
        String duration = JOptionPane.showInputDialog(null, "Please Enter the duration: ");
        int x = Integer.parseInt(duration);
        Sound target = new Sound(currentSound.getLength() * x + currentSound.getLength()/x);
        SoundSample[] sampleArray = currentSound.getSamples();
        SoundSample[] targetArray = target.getSamples();
        int value = 0;
        int count = 0;
        for (int i = 0; i < sampleArray.length; i++) {
            value = sampleArray[i].getValue();
            for (int j = 0; j < x; j++) {
                targetArray[count].setValue(value);
                count++;
            }
        }
        for (int i = 0; i < sampleArray.length; i += x) {
            value = sampleArray[i].getValue();
            targetArray[count].setValue(value);
            count++;

        }

        target.play();
    }//GEN-LAST:event_SpreadNSqueeze

    private void weightedAverageSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_weightedAverageSound
        Object[] options = { "LEFT",
                "MIDDLE",
                "RIGHT" };
        int choice = JOptionPane.showOptionDialog(this, "Please choose the skew of the filter",
                "Gaussuan filter option", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options,
                options[2]);
        currentSound.weightedAverage((short) choice);
        currentSound.play();
    }//GEN-LAST:event_weightedAverageSound

    private void minFilterSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minFilterSound
        currentSound.minFilter();
        currentSound.play();
    }//GEN-LAST:event_minFilterSound

    private void maxFilterSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maxFilterSound
        currentSound.maxFilter();
        currentSound.play();
    }//GEN-LAST:event_maxFilterSound

    private void medianFilterSound(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_medianFilterSound
        currentSound.medianFilter();
        currentSound.play();
    }//GEN-LAST:event_medianFilterSound

    private void jSlider6StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider6StateChanged
        Picture target = new Picture(inputImage.getWidth(), inputImage.getHeight());
        Pixel[] p = inputImage.getPixels();
        Pixel[] t = target.getPixels();
        for (int i = 0; i < p.length; i++) {
            t[i].setColor(p[i].getColor());
        }
        target = inputImage.scaleUp(jSlider6.getValue());
        pic = target;
        jLabel1_ImageDisplay.setIcon(new ImageIcon(pic.getImage()));
    }//GEN-LAST:event_jSlider6StateChanged

    private void jSlider5StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider5StateChanged
        Picture target = new Picture(inputImage.getWidth(), inputImage.getHeight());
        Pixel[] p = inputImage.getPixels();
        Pixel[] t = target.getPixels();
        for (int i = 0; i < p.length; i++) {
            t[i].setColor(p[i].getColor());
        }
        target = inputImage.scaleDown(jSlider5.getValue());
        pic = target;
        jLabel1_ImageDisplay.setIcon(new ImageIcon(pic.getImage()));
    }//GEN-LAST:event_jSlider5StateChanged

    private void reflectionD2(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectionD2
        pic = inputImage;
        pic.d2Ref();
        applyPicture();
    }//GEN-LAST:event_reflectionD2

    private void reflectionD1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reflectionD1
        pic = inputImage;
        pic.d1Ref();
        applyPicture();
    }//GEN-LAST:event_reflectionD1

    private void horizontalReflection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_horizontalReflection
        pic = inputImage;
        pic.hReflection(pic);
        applyPicture();
    }//GEN-LAST:event_horizontalReflection

    private void verticalReflection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verticalReflection
        pic = inputImage;
        pic = pic.reflection_596(pic);

        applyPicture();
    }//GEN-LAST:event_verticalReflection

    private void blendImages(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_blendImages
        fileName = FileChooser.pickAFile();
        Picture secondImage = new Picture(fileName);
        Picture target = Picture.blend_596(inputImage, secondImage);
        pic = target;
        applyPicture();
    }//GEN-LAST:event_blendImages

    private void edgeDetectionLR(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetectionLR
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the threshold value: ");
            try {
                pic = inputImage;
                int th = Integer.parseInt(size);
                pic.edgeDetectionLR(th);
                applyPicture();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_edgeDetectionLR

    private void edgeDetectionTB(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetectionTB
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the threshold value: ");
            try {
                pic = inputImage;
                int th = Integer.parseInt(size);
                pic.edgeDetectionTB(th);
                applyPicture();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_edgeDetectionTB

    private void edgeDetectionLaplacian(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetectionLaplacian
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // edge detection using laplactian filter from openCV library
            // Declare the variables we are going to use
            Mat src, src_gray = new Mat(), dst = new Mat();
            int kernel_size = 3;
            int scale = 1;
            int delta = 0;
            int ddepth = CvType.CV_16S;
            src = Imgcodecs.imread(fileName, Imgcodecs.IMREAD_COLOR); // Load an image
            if (src.empty()) {
                System.out.println("Error opening image");
                return;
            }
            // Reduce noise by blurring with a Gaussian filter ( kernel size = 3 )
            Imgproc.GaussianBlur(src, src, new Size(3, 3), 0, 0, Core.BORDER_DEFAULT);
            // Convert the image to grayscale
            Imgproc.cvtColor(src, src_gray, Imgproc.COLOR_RGB2GRAY);
            Mat abs_dst = new Mat(); // the image
            Imgproc.Laplacian(src_gray, dst, ddepth, kernel_size, scale, delta, Core.BORDER_DEFAULT);
            // converting back to CV_8U
            Core.convertScaleAbs(dst, abs_dst);
            HighGui.imshow("Edge using laplacian filter", abs_dst);
            HighGui.waitKey(1000);
        }
    }//GEN-LAST:event_edgeDetectionLaplacian

    private void edgeDetection(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_edgeDetection
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null, "Please Enter the threshold value: ");
            try {
                pic = inputImage;
                int th = Integer.parseInt(size);
                pic.edgeDetectionAll(th);
                applyPicture();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_edgeDetection

    private void redEye(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redEye
        if (pic == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            jLabel1_ImageDisplay.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Clicked!");
                    System.out.println(e.getX());
                    System.out.println(e.getY());
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();

                        double W = (pic.getWidth() * 1.00 / jLabel1_ImageDisplay.getWidth());
                        double H = (pic.getHeight() * 1.00 / jLabel1_ImageDisplay.getHeight());

                        x1 = (int) (W * x1);
                        x2 = (int) (W * x2);
                        y1 = (int) (H * y1);
                        y2 = (int) (H * y2);

                        Color newColor = JColorChooser.showDialog(null, "Choose New Color", Color.BLACK);
                        int trashhold = Integer.parseInt(JOptionPane.showInputDialog("TrashHold?"));
                        for (int i = y1; i < y2; i++) {
                            for (int j = x1; j < x2; j++) {
                                Pixel p = pic.getPixel(j, i);
                                // here we compare because get the different between Red color amd pxl .
                                if (p.colorDistance(Color.RED) < trashhold) {
                                    p.setColor(newColor);
                                }
                            }
                        }
                        applyPicture();
                        numOfClicks = 0;
                        jLabel1_ImageDisplay.removeMouseListener(this);
                    }
                }
            });
    }//GEN-LAST:event_redEye
    }
    private void computeContrast(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_computeContrast
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            Pixel[] pixels = inputImage.getPixels();

            int Contrast;
            double max_val = 0;
            double min_val = Integer.MAX_VALUE;

            for (int i = 0; i < pixels.length; i++) {
                // Here we Devide by 3 because get the avg .
                Contrast = (int) ((pixels[i].getRed() + pixels[i].getGreen() + pixels[i].getBlue()) / 3);
                // if Contrast Greater than max we will save the value in max
                if (Contrast > max_val) {
                    max_val = Contrast;
                }
                // if Contrast less than min we will save the value in min
                if (Contrast < min_val) {
                    min_val = Contrast;
                }
            }
            double contrast = ((max_val - min_val) / (max_val + min_val));
            JOptionPane.showMessageDialog(null, "The level of Contrast is = " + contrast);
         }
    }//GEN-LAST:event_computeContrast

    private void MedianFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MedianFilter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null,
                "Please Enter the size of the filter please (one odd number only): ");
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.generalizedMedianFilter(FilterSize);
                applyPicture();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_MedianFilter

    private void WeightedMedianFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WeightedMedianFilter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null,
                "Please Enter the size of the filter please (one odd number only): ");
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.generalizedMedianWeightedFilter(FilterSize);
                applyPicture();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_WeightedMedianFilter

    private void LaplacianFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LaplacianFilter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = "3";
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.generalizedLaplacianFilter(FilterSize);
                applyPicture();
            } catch (NumberFormatException e) {
                System.out.println(e);
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_LaplacianFilter

    private void jButton3MaxFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3MaxFilter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null,
                "Please Enter the size of the filter please (one odd number only): ");
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.generalizedMaxFilter(FilterSize);
                applyPicture();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jButton3MaxFilter

    private void GaussianFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GaussianFilter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            pic = inputImage;
            // give user 3 option high middle low.
            Object[] options = { "LOW",
                "MIDDLE",
                "HIGH" };
            int choice = JOptionPane.showOptionDialog(this, "Please choose the important of the middle pixel",
                "Gaussuan filter option", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null,
                options, options[2]);
            pic.choiceGaussianFilter3x3(choice);
            applyPicture();
        }
    }//GEN-LAST:event_GaussianFilter

    private void MinFIlter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MinFIlter
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null,
                "Please Enter the size of the filter please (one odd number only): ");
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                pic.generalizedMinFilter(FilterSize);
                applyPicture();
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_MinFIlter

    private void CropHandler(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CropHandler
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image please!", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            JFrame parent = new JFrame();
            JOptionPane.showMessageDialog(parent, "Please click on two points in the image");

            jLabel1_ImageDisplay.addMouseListener(new MouseAdapter() {
                public void mouseClicked(MouseEvent e) {
                    System.out.println("Clicked!");
                    System.out.println(e.getX());
                    System.out.println(e.getY());
                    numOfClicks++;
                    if (numOfClicks == 1) {
                        x1 = e.getX();
                        y1 = e.getY();
                    } else if (numOfClicks == 2) {
                        x2 = e.getX();
                        y2 = e.getY();
                        // call the crop method with both cordinates.
                        CropImage(x1, y1, x2, y2);
                        numOfClicks = 0;
                        jLabel1_ImageDisplay.removeMouseListener(this);
                    }
                }
            });
        }
    }//GEN-LAST:event_CropHandler

    private void BoxFilter(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BoxFilter
        // TODO add your handling code here:
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            String size = JOptionPane.showInputDialog(null,
                "Please Enter the size of the filter please (one odd number only): ");
            try {
                pic = inputImage;
                int FilterSize = Integer.parseInt(size);
                if (FilterSize % 2 == 0) {
                    JOptionPane.showMessageDialog(null, "Fitler size should be odd", "Error",
                        JOptionPane.ERROR_MESSAGE);
                    return;
                }
                inputImage.generalizedBoxFilter(FilterSize);
                applyPicture();
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Please put integer only", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_BoxFilter

    private void ComputeHistogram(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComputeHistogram
        ComputeHistograms();
    }//GEN-LAST:event_ComputeHistogram

    private void jButton1_Histogram6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_Histogram6ActionPerformed
        createCollage();
    }//GEN-LAST:event_jButton1_Histogram6ActionPerformed

    private void GrayToBinary(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrayToBinary
        if (inputImage == null) {
            JOptionPane.showMessageDialog(null, "Select an image ", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else {String ThresholdValue = JOptionPane.showInputDialog(null, "Please Enter the size: ");
            try {
                int threshold = Integer.parseInt(ThresholdValue);
                pic = inputImage.grayToBinary(threshold);
                applyPicture();
                //            icon = new ImageIcon(inputImage.getImage());
                //            jLabel1_ImageDisplay.setIcon(icon);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "Please select the image", "Picture Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_GrayToBinary

    private void rotation180(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotation180
        try {
            pic = inputImage.rotate180();
            //            icon = new ImageIcon(inputImage.getImage());
            //            jLabel1_ImageDisplay.setIcon(icon);
            applyPicture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image", "Picture Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rotation180

    private void rgbToHsv(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rgbToHsv
        Pixel[] pixels = inputImage.getPixels();
        for(Pixel pixel: pixels){
            int red = pixel.getRed();
            int green = pixel.getGreen();
            int blue = pixel.getBlue();
            float[] hsv = new float[3];
            float[] c = Color.RGBtoHSB(red,green,blue,hsv);
            pixel.setColor(new Color(c[0],c[1],c[2]));
        }
        //        jLabel1_ImageDisplay.setIcon(new ImageIcon(inputImage.getImage()));
        applyPicture();
    }//GEN-LAST:event_rgbToHsv

    private void grayScale(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grayScale
        Pixel[] pixelArray = inputImage.getPixels();
        Pixel pixel = null;
        int intensity = 0;

        // loop through all the pixels
        for (int i = 0; i < pixelArray.length; i++) {
            // get the current pixel
            pixel = pixelArray[i];

            // compute the intensity of the pixel (average value)
            intensity = (int) ((pixel.getRed() + pixel.getGreen()
                + pixel.getBlue()) / 3);
        // set the pixel color to the new color
        pixel.setColor(new Color(intensity, intensity, intensity));

        }
        //        jLabel1_ImageDisplay.setIcon(new ImageIcon(inputImage.getImage()));
        applyPicture();
    }//GEN-LAST:event_grayScale

    private void jSlider3StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider3StateChanged
        int blue = (int)(jSlider3.getValue() * 2.55);
        Pixel[] pixels=inputImage.getPixels();
        for(Pixel pixel: pixels){
            if(blue > pixel.getBlue()) pixel.setBlue(blue-pixel.getBlue());
            else pixel.setBlue(pixel.getBlue()-blue);
        }
        pic = inputImage;
        applyPicture();
    }//GEN-LAST:event_jSlider3StateChanged

    private void jSlider2StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider2StateChanged
        int green = (int)(jSlider2.getValue() * 2.55);
        Pixel[] pixels=inputImage.getPixels();
        for(Pixel pixel: pixels){
            if(green > pixel.getGreen()) pixel.setGreen(green-pixel.getGreen());
            else pixel.setGreen(pixel.getGreen()-green);
        }
        pic = inputImage;
        applyPicture();
    }//GEN-LAST:event_jSlider2StateChanged

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        int red = (int)(jSlider1.getValue() * 2.55);
        Pixel[] pixels=inputImage.getPixels();
        for(Pixel pixel: pixels){
            if((red > pixel.getRed())) pixel.setRed(red - pixel.getRed());
            else pixel.setRed(pixel.getRed()- red);
        }
        pic = inputImage;
        applyPicture();
    }//GEN-LAST:event_jSlider1StateChanged

    private void jButton1_ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_ResetActionPerformed
         // TODO add your handling code here:
        try {
            // inputImage.copy(resetImage, 0, 0, resetImage.getWidth()-1,
            // resetImage.getHeight()-1, 0, 0);
            jSlider1.setValue(50);
            jSlider2.setValue(50);
            jSlider3.setValue(50);
            jSlider5.setValue(0);
            jSlider6.setValue(0);
            inputImage = new Picture(fileName);
            pic = inputImage;
            applyPicture();
//            icon = new ImageIcon(inputImage.getImage());
//            jLabel1_ImageDisplay.setIcon(icon);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image first", "Picture Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1_ResetActionPerformed

    private void rotateRightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rotateRightActionPerformed
         try {
            pic = inputImage.rotateRight();
//            icon = new ImageIcon(inputImage.getImage());
//            jLabel1_ImageDisplay.setIcon(icon);
            applyPicture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image first", "Picture Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_rotateRightActionPerformed

    private void jButton1_BrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_BrowseActionPerformed
          // TODO add your handling code here:
        try {
            fileName = FileChooser.pickAFile();
            inputImage = new Picture(fileName);
            resetImage = new Picture(fileName);
            pic = inputImage;

//            icon = new ImageIcon(inputImage.getImage());
//            // jLabel1_ImageDisplay.setPreferredSize(null);
//            jLabel1_ImageDisplay.setIcon(icon);
            applyPicture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1_BrowseActionPerformed

    private void jButton1_RotateLeftActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1_RotateLeftActionPerformed
         try {
            pic = inputImage.rotateLeft();
//            icon = new ImageIcon(inputImage.getImage());
//            jLabel1_ImageDisplay.setIcon(icon);
            applyPicture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image", "Picture Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1_RotateLeftActionPerformed

    private void backgroundSubPic(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backgroundSubPic
        Picture old = new Picture(FileChooser.pickAFile());
        Picture n = new Picture(FileChooser.pickAFile());
        inputImage.swapBackground(old, n, 80);
        applyPicture();
    }//GEN-LAST:event_backgroundSubPic
    
    
//    private void jButton1_BrowseActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1_BrowseActionPerformed
//        // TODO add your handling code here:
//        try {
//            fileName = FileChooser.pickAFile();
//            inputImage = new Picture(fileName);
//            resetImage = new Picture(fileName);
//            pic = inputImage;
//
////            icon = new ImageIcon(inputImage.getImage());
////            // jLabel1_ImageDisplay.setPreferredSize(null);
////            jLabel1_ImageDisplay.setIcon(icon);
//            applyPicture();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Please select the image", "Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }// GEN-LAST:event_jButton1_BrowseActionPerformed
//
//    private void jButton1_RotateLeftActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1_RotateLeftActionPerformed
//        // TODO add your handling code here:
//        try {
//            pic = inputImage.rotateLeft();
////            icon = new ImageIcon(inputImage.getImage());
////            jLabel1_ImageDisplay.setIcon(icon);
//            applyPicture();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Please select the image", "Picture Error", JOptionPane.ERROR_MESSAGE);
//        }
//    }// GEN-LAST:event_jButton1_RotateLeftActionPerformed
//
//    private void rotateRightActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_rotateRightActionPerformed
//        // TODO add your handling code here:
//        try {
//            pic = inputImage.rotateRight();
////            icon = new ImageIcon(inputImage.getImage());
////            jLabel1_ImageDisplay.setIcon(icon);
//            applyPicture();
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Please select the image first", "Picture Error",
//                    JOptionPane.ERROR_MESSAGE);
//        }
//    }// GEN-LAST:event_rotateRightActionPerformed
//
//    private void jButton1_ResetActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1_ResetActionPerformed
//        // TODO add your handling code here:
//        try {
//            // inputImage.copy(resetImage, 0, 0, resetImage.getWidth()-1,
//            // resetImage.getHeight()-1, 0, 0);
//            jSlider1.setValue(50);
//            jSlider2.setValue(50);
//            jSlider3.setValue(50);
//            inputImage = new Picture(fileName);
//            pic = inputImage;
//            applyPicture();
////            icon = new ImageIcon(inputImage.getImage());
////            jLabel1_ImageDisplay.setIcon(icon);
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Please select the image first", "Picture Error",
//                    JOptionPane.ERROR_MESSAGE);
//        }
//
//    }// GEN-LAST:event_jButton1_ResetActionPerformed

    private void jButton1_HistogramActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1_HistogramActionPerformed
        // TODO add your handling code here:
        try {
            pic = inputImage;
            inputImage.myHistogram(pic);
            applyPicture();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Please select the image first", "Picture Error",
                    JOptionPane.ERROR_MESSAGE);
        }

    }// GEN-LAST:event_jButton1_HistogramActionPerformed
    
     private void createCollage() {
        // ask for 4 picture
        Picture sourcePicture = inputImage;
        Picture second = null;
        Picture third = null;
        Picture forth = null;
        Picture fifth = null;
        JFileChooser FileChooser = new JFileChooser("");
        int conf = JOptionPane.showConfirmDialog(null, "Choose the Second image", "Choose image",
                JOptionPane.OK_CANCEL_OPTION);
        if (conf == 0) {
            int val = FileChooser.showOpenDialog(null);
            if (val == JFileChooser.APPROVE_OPTION) {
                second = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
            }
        }
        conf = JOptionPane.showConfirmDialog(null, "Choose the third image", "Choose image",
                JOptionPane.OK_CANCEL_OPTION);
        if (conf == 0) {
            int val = FileChooser.showOpenDialog(null);
            if (val == JFileChooser.APPROVE_OPTION) {
                third = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
            }
        }
        conf = JOptionPane.showConfirmDialog(null, "Choose the forth image", "Choose image",
                JOptionPane.OK_CANCEL_OPTION);
        if (conf == 0) {
            int val = FileChooser.showOpenDialog(null);
            if (val == JFileChooser.APPROVE_OPTION) {
                forth = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
            }
        }
        conf = JOptionPane.showConfirmDialog(null, "Choose the fifth image", "Choose image",
                JOptionPane.OK_CANCEL_OPTION);
        if (conf == 0) {
            int val = FileChooser.showOpenDialog(null);
            if (val == JFileChooser.APPROVE_OPTION) {
                fifth = new Picture(FileChooser.getSelectedFile().getAbsolutePath());
            }
        }

        int width = inputImage.getWidth() + second.getWidth() + third.getWidth();
        int height = inputImage.getHeight() + second.getHeight() + forth.getHeight();
        pic = new Picture(width, height);

        Pixel sourcePixel;
        Pixel targetPixel;

        // top left
        for (int i = 0; i < second.getWidth(); i++) {
            for (int j = 0; j < second.getHeight(); j++) {
                sourcePixel = second.getPixel(i, j);
                targetPixel = pic.getPixel(i, j);
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // top right
        for (int j = 0; j < third.getWidth(); j++) {
            for (int k = 0; k < third.getHeight(); k++) {
                sourcePixel = third.getPixel(j, k);
                targetPixel = pic.getPixel((sourcePicture.getWidth() + j + second.getWidth()), (k));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
         System.out.println(sourcePicture.getWidth());
        for (int j = 0; j < sourcePicture.getWidth(); j++) {
            for (int k = 0; k < sourcePicture.getHeight(); k++) {
                sourcePixel = sourcePicture.getPixel(j, k);
                targetPixel = pic.getPixel((j + second.getWidth()), (k + second.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // bottom left
        for (int j = 0; j < forth.getWidth(); j++) {
            for (int k = 0; k < forth.getHeight(); k++) {
                sourcePixel = forth.getPixel(j, k);
                targetPixel = pic.getPixel((j), (k + second.getHeight() + sourcePicture.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        // bottom right
        for (int j = 0; j < fifth.getWidth(); j++) {
            for (int k = 0; k < fifth.getHeight(); k++) {
                sourcePixel = fifth.getPixel(j, k);
                targetPixel = pic.getPixel((j + second.getWidth() + sourcePicture.getWidth()),
                        (k + third.getHeight() + sourcePicture.getHeight()));
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        applyPicture();
    }
     private void applyPicture() {
        Image img = (pic.getImage()).getScaledInstance(jLabel1_ImageDisplay.getWidth(), jLabel1_ImageDisplay.getHeight(),
                Image.SCALE_SMOOTH);
        ;
        jLabel1_ImageDisplay.setText("");
        jLabel1_ImageDisplay.setIcon(new ImageIcon(img));
    }
    private PixLinkedList[][] ComputeHistograms() {

        PixLinkedList[][] Histograms = new PixLinkedList[3][256]; // [0] red, [1] green [2] blue

        int maxR = 0;
        int maxR_index = 0;
        int maxG = 0;
        int maxG_index = 0;
        int maxB = 0;
        int maxB_index = 0;

        for (int i = 0; i < 256; i++) { // Inisilazing all the arrays
            Histograms[0][i] = new PixLinkedList();
            Histograms[1][i] = new PixLinkedList();
            Histograms[2][i] = new PixLinkedList();
        }
        for (int i = 0; i < inputImage.getWidth(); i++) {
            for (int j = 0; j < inputImage.getHeight(); j++) {
                int intensityR = inputImage.getPixel(i, j).getRed();
                int intensityG = inputImage.getPixel(i, j).getGreen();
                int intensityB = inputImage.getPixel(i, j).getBlue();
                Histograms[0][intensityR].addPixel(new PixelLinkedList_node(i, j));
                Histograms[1][intensityG].addPixel(new PixelLinkedList_node(i, j));
                Histograms[2][intensityB].addPixel(new PixelLinkedList_node(i, j));

                if (Histograms[0][intensityR].getTotal() > maxR) {
                    maxR = Histograms[0][intensityR].getTotal();
                    maxR_index = intensityR;
                }
                if (Histograms[1][intensityG].getTotal() > maxG) {
                    maxG = Histograms[1][intensityG].getTotal();
                    maxG_index = intensityG;
                }
                if (Histograms[2][intensityB].getTotal() > maxB) {
                    maxB = Histograms[2][intensityB].getTotal();
                    maxB_index = intensityB;
                }
            }
        }
        // ***plotting the histogrmas***
        if ((maxR == maxG && maxR == maxB)) {// image is gray
            if ((maxR_index == maxG_index && maxG_index == maxB_index)) {
                PlotHistogram("Gray", Histograms[0]);
                return Histograms;
            }
        }
        PlotHistogram("RED", Histograms[0]);
        PlotHistogram("GREEN", Histograms[1]);
        PlotHistogram("BLUE", Histograms[2]);
        return Histograms;
    }

    private void PlotHistogram(String color, PixLinkedList Histogram[]) {
        // first must find the max height of the histogram.
        int maxHeight = 0;
        for (int i = 0; i < Histogram.length; i++) {
            if (Histogram[i].getTotal() > maxHeight) {
                maxHeight = Histogram[i].getTotal();
            }
        }

        Picture histogram = new Picture(256, 256, Color.white);

        Color c;
        if (color.equalsIgnoreCase("RED")) {
            c = Color.RED;
        } else if (color.equalsIgnoreCase("green")) {
            c = Color.GREEN;
        } else if (color.equalsIgnoreCase("BLue")) {
            c = Color.BLUE;
        } else {
            c = Color.GRAY;
        }

        // Actual max = maxHeight
        // the max we want to make is 512 so it become visible
        for (int i = 0; i < 256; i++) { // now plot the histogram
            int max = (int) (Histogram[i].getTotal() * 256 / maxHeight);
            for (int j = 255; j >= (256 - max); j--) {
                histogram.getPixel(i, j).setColor(c);
            }
        }
        histogram.scaleUp(2).show();
    }
    private void CropImage(int x1, int y1, int x2, int y2) {
        Picture sourcePicture = inputImage;
        double W = (inputImage.getWidth() * 1.00 / jLabel1_ImageDisplay.getWidth());
        double H = (inputImage.getHeight() * 1.00 / jLabel1_ImageDisplay.getHeight());

        x1 = (int) (W * x1);
        x2 = (int) (W * x2);
        y1 = (int) (H * y1);
        y2 = (int) (H * y2);

        Picture newPic = new Picture(sourcePicture.getWidth(), sourcePicture.getHeight());

        Pixel sourcePixel;
        Pixel targetPixel;

        for (int i = x1; i < x2; i++) {
            for (int j = y1; j < y2; j++) {
                sourcePixel = sourcePicture.getPixel(i, j);
                targetPixel = newPic.getPixel(i, j);
                targetPixel.setColor(sourcePixel.getColor());
            }
        }
        pic = newPic;
        applyPicture();
    }
    
     private void changeContentStatus(boolean status) {
//        clipSound.setEnabled(status);
//        splicingSound.setEnabled(status);
//        spreadSound.setEnabled(status);
//        reversingSound.setEnabled(status);
//        blendingSound.setEnabled(status);
//        simpleAVG.setEnabled(status);
//        weightedAVG.setEnabled(status);
//        playSound.setEnabled(status);
//        volumeSlider.setEnabled(status);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        // <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
        // (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the default
         * look and feel.
         * For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            System.load("E:/Downloads/opencv/build/java/x64/opencv_java470.dll");

            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

}
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CPIT380ProjectFrame.class  

.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);

} catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CPIT380ProjectFrame.class  

.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);

} catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CPIT380ProjectFrame.class  

.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);

} catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CPIT380ProjectFrame.class  

.getName()).log(java.util.logging.Level.SEVERE,
                    null, ex);
        }
        // </editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CPIT380ProjectFrame().setVisible(true);
            }
        });

    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton19;
    private javax.swing.JButton jButton1_Browse;
    private javax.swing.JButton jButton1_Histogram1;
    private javax.swing.JButton jButton1_Histogram2;
    private javax.swing.JButton jButton1_Histogram3;
    private javax.swing.JButton jButton1_Histogram4;
    private javax.swing.JButton jButton1_Histogram6;
    private javax.swing.JButton jButton1_Histogram7;
    private javax.swing.JButton jButton1_Histogram8;
    private javax.swing.JButton jButton1_Histogram9;
    private javax.swing.JButton jButton1_Reset;
    private javax.swing.JButton jButton1_RotateLeft;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton20;
    private javax.swing.JButton jButton21;
    private javax.swing.JButton jButton22;
    private javax.swing.JButton jButton23;
    private javax.swing.JButton jButton24;
    private javax.swing.JButton jButton25;
    private javax.swing.JButton jButton26;
    private javax.swing.JButton jButton27;
    private javax.swing.JButton jButton28;
    private javax.swing.JButton jButton29;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton30;
    private javax.swing.JButton jButton31;
    private javax.swing.JButton jButton32;
    private javax.swing.JButton jButton33;
    private javax.swing.JButton jButton34;
    private javax.swing.JButton jButton35;
    private javax.swing.JButton jButton36;
    private javax.swing.JButton jButton37;
    private javax.swing.JButton jButton38;
    private javax.swing.JButton jButton39;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel1_ImageDisplay;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel1_HoldingImages;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel2_HoldingButtons;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSlider jSlider2;
    private javax.swing.JSlider jSlider3;
    private javax.swing.JSlider jSlider4;
    private javax.swing.JSlider jSlider5;
    private javax.swing.JSlider jSlider6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane1_Pictures;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton rotateRight;
    // End of variables declaration//GEN-END:variables
        }
